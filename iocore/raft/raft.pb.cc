// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: raft.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "raft.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace raft {

namespace {

const ::google::protobuf::Descriptor* RaftConfigPb_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RaftConfigPb_reflection_ = NULL;
const ::google::protobuf::Descriptor* RaftLogEntryPb_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RaftLogEntryPb_reflection_ = NULL;
const ::google::protobuf::Descriptor* RaftMessagePb_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RaftMessagePb_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_raft_2eproto() {
  protobuf_AddDesc_raft_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "raft.proto");
  GOOGLE_CHECK(file != NULL);
  RaftConfigPb_descriptor_ = file->message_type(0);
  static const int RaftConfigPb_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RaftConfigPb, node_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RaftConfigPb, replica_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RaftConfigPb, term_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RaftConfigPb, index_),
  };
  RaftConfigPb_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RaftConfigPb_descriptor_,
      RaftConfigPb::default_instance_,
      RaftConfigPb_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RaftConfigPb, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RaftConfigPb, _unknown_fields_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RaftConfigPb, _extensions_),
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RaftConfigPb));
  RaftLogEntryPb_descriptor_ = file->message_type(1);
  static const int RaftLogEntryPb_offsets_[11] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RaftLogEntryPb, data_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RaftLogEntryPb, config_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RaftLogEntryPb, index_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RaftLogEntryPb, extent_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RaftLogEntryPb, term_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RaftLogEntryPb, previous_log_term_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RaftLogEntryPb, previous_log_index_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RaftLogEntryPb, leader_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RaftLogEntryPb, data_committed_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RaftLogEntryPb, config_committed_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RaftLogEntryPb, vote_),
  };
  RaftLogEntryPb_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RaftLogEntryPb_descriptor_,
      RaftLogEntryPb::default_instance_,
      RaftLogEntryPb_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RaftLogEntryPb, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RaftLogEntryPb, _unknown_fields_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RaftLogEntryPb, _extensions_),
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RaftLogEntryPb));
  RaftMessagePb_descriptor_ = file->message_type(2);
  static const int RaftMessagePb_offsets_[10] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RaftMessagePb, term_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RaftMessagePb, from_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RaftMessagePb, leader_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RaftMessagePb, data_committed_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RaftMessagePb, config_committed_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RaftMessagePb, entry_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RaftMessagePb, nack_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RaftMessagePb, last_log_term_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RaftMessagePb, last_log_index_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RaftMessagePb, vote_),
  };
  RaftMessagePb_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RaftMessagePb_descriptor_,
      RaftMessagePb::default_instance_,
      RaftMessagePb_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RaftMessagePb, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RaftMessagePb, _unknown_fields_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RaftMessagePb, _extensions_),
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RaftMessagePb));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_raft_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RaftConfigPb_descriptor_, &RaftConfigPb::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RaftLogEntryPb_descriptor_, &RaftLogEntryPb::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RaftMessagePb_descriptor_, &RaftMessagePb::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_raft_2eproto() {
  delete RaftConfigPb::default_instance_;
  delete RaftConfigPb_reflection_;
  delete RaftLogEntryPb::default_instance_;
  delete RaftLogEntryPb_reflection_;
  delete RaftMessagePb::default_instance_;
  delete RaftMessagePb_reflection_;
}

void protobuf_AddDesc_raft_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\nraft.proto\022\004raft\"T\n\014RaftConfigPb\022\014\n\004no"
    "de\030\001 \003(\t\022\017\n\007replica\030\002 \003(\t\022\014\n\004term\030\003 \001(\003\022"
    "\r\n\005index\030\004 \001(\003*\010\010d\020\200\200\200\200\002\"\200\002\n\016RaftLogEntr"
    "yPb\022\014\n\004data\030\001 \001(\014\022\"\n\006config\030\002 \001(\0132\022.raft"
    ".RaftConfigPb\022\r\n\005index\030\003 \001(\003\022\016\n\006extent\030\004"
    " \001(\003\022\014\n\004term\030\005 \001(\003\022\031\n\021previous_log_term\030"
    "\006 \001(\003\022\032\n\022previous_log_index\030\007 \001(\003\022\016\n\006lea"
    "der\030\010 \001(\t\022\026\n\016data_committed\030\t \001(\003\022\030\n\020con"
    "fig_committed\030\n \001(\003\022\014\n\004vote\030\013 \001(\t*\010\010d\020\200\200"
    "\200\200\002\"\347\001\n\rRaftMessagePb\022\014\n\004term\030\001 \001(\003\022\014\n\004f"
    "rom\030\002 \001(\t\022\016\n\006leader\030\003 \001(\t\022\026\n\016data_commit"
    "ted\030\004 \001(\003\022\030\n\020config_committed\030\005 \001(\003\022#\n\005e"
    "ntry\030\010 \001(\0132\024.raft.RaftLogEntryPb\022\014\n\004nack"
    "\030\t \001(\010\022\025\n\rlast_log_term\030\n \001(\003\022\026\n\016last_lo"
    "g_index\030\013 \001(\003\022\014\n\004vote\030\014 \001(\t*\010\010d\020\200\200\200\200\002", 597);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "raft.proto", &protobuf_RegisterTypes);
  RaftConfigPb::default_instance_ = new RaftConfigPb();
  RaftLogEntryPb::default_instance_ = new RaftLogEntryPb();
  RaftMessagePb::default_instance_ = new RaftMessagePb();
  RaftConfigPb::default_instance_->InitAsDefaultInstance();
  RaftLogEntryPb::default_instance_->InitAsDefaultInstance();
  RaftMessagePb::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_raft_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_raft_2eproto {
  StaticDescriptorInitializer_raft_2eproto() {
    protobuf_AddDesc_raft_2eproto();
  }
} static_descriptor_initializer_raft_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int RaftConfigPb::kNodeFieldNumber;
const int RaftConfigPb::kReplicaFieldNumber;
const int RaftConfigPb::kTermFieldNumber;
const int RaftConfigPb::kIndexFieldNumber;
#endif  // !_MSC_VER

RaftConfigPb::RaftConfigPb()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void RaftConfigPb::InitAsDefaultInstance() {
}

RaftConfigPb::RaftConfigPb(const RaftConfigPb& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void RaftConfigPb::SharedCtor() {
  _cached_size_ = 0;
  term_ = GOOGLE_LONGLONG(0);
  index_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RaftConfigPb::~RaftConfigPb() {
  SharedDtor();
}

void RaftConfigPb::SharedDtor() {
  if (this != default_instance_) {
  }
}

void RaftConfigPb::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RaftConfigPb::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RaftConfigPb_descriptor_;
}

const RaftConfigPb& RaftConfigPb::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_raft_2eproto();
  return *default_instance_;
}

RaftConfigPb* RaftConfigPb::default_instance_ = NULL;

RaftConfigPb* RaftConfigPb::New() const {
  return new RaftConfigPb;
}

void RaftConfigPb::Clear() {
  _extensions_.Clear();
  if (_has_bits_[2 / 32] & (0xffu << (2 % 32))) {
    term_ = GOOGLE_LONGLONG(0);
    index_ = GOOGLE_LONGLONG(0);
  }
  node_.Clear();
  replica_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RaftConfigPb::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated string node = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_node:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_node()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->node(this->node_size() - 1).data(),
            this->node(this->node_size() - 1).length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_node;
        if (input->ExpectTag(18)) goto parse_replica;
        break;
      }

      // repeated string replica = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_replica:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_replica()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->replica(this->replica_size() - 1).data(),
            this->replica(this->replica_size() - 1).length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_replica;
        if (input->ExpectTag(24)) goto parse_term;
        break;
      }

      // optional int64 term = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_term:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &term_)));
          set_has_term();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_index;
        break;
      }

      // optional int64 index = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_index:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &index_)));
          set_has_index();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        if ((800u <= tag)) {
          DO_(_extensions_.ParseField(tag, input, default_instance_,
                                      mutable_unknown_fields()));
          continue;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void RaftConfigPb::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated string node = 1;
  for (int i = 0; i < this->node_size(); i++) {
  ::google::protobuf::internal::WireFormat::VerifyUTF8String(
    this->node(i).data(), this->node(i).length(),
    ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->node(i), output);
  }

  // repeated string replica = 2;
  for (int i = 0; i < this->replica_size(); i++) {
  ::google::protobuf::internal::WireFormat::VerifyUTF8String(
    this->replica(i).data(), this->replica(i).length(),
    ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->replica(i), output);
  }

  // optional int64 term = 3;
  if (has_term()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(3, this->term(), output);
  }

  // optional int64 index = 4;
  if (has_index()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(4, this->index(), output);
  }

  // Extension range [100, 536870912)
  _extensions_.SerializeWithCachedSizes(
      100, 536870912, output);

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* RaftConfigPb::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated string node = 1;
  for (int i = 0; i < this->node_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->node(i).data(), this->node(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(1, this->node(i), target);
  }

  // repeated string replica = 2;
  for (int i = 0; i < this->replica_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->replica(i).data(), this->replica(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(2, this->replica(i), target);
  }

  // optional int64 term = 3;
  if (has_term()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(3, this->term(), target);
  }

  // optional int64 index = 4;
  if (has_index()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(4, this->index(), target);
  }

  // Extension range [100, 536870912)
  target = _extensions_.SerializeWithCachedSizesToArray(
      100, 536870912, target);

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int RaftConfigPb::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[2 / 32] & (0xffu << (2 % 32))) {
    // optional int64 term = 3;
    if (has_term()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->term());
    }

    // optional int64 index = 4;
    if (has_index()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->index());
    }

  }
  // repeated string node = 1;
  total_size += 1 * this->node_size();
  for (int i = 0; i < this->node_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->node(i));
  }

  // repeated string replica = 2;
  total_size += 1 * this->replica_size();
  for (int i = 0; i < this->replica_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->replica(i));
  }

  total_size += _extensions_.ByteSize();

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RaftConfigPb::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RaftConfigPb* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RaftConfigPb*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RaftConfigPb::MergeFrom(const RaftConfigPb& from) {
  GOOGLE_CHECK_NE(&from, this);
  node_.MergeFrom(from.node_);
  replica_.MergeFrom(from.replica_);
  if (from._has_bits_[2 / 32] & (0xffu << (2 % 32))) {
    if (from.has_term()) {
      set_term(from.term());
    }
    if (from.has_index()) {
      set_index(from.index());
    }
  }
  _extensions_.MergeFrom(from._extensions_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RaftConfigPb::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RaftConfigPb::CopyFrom(const RaftConfigPb& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RaftConfigPb::IsInitialized() const {


  if (!_extensions_.IsInitialized()) return false;  return true;
}

void RaftConfigPb::Swap(RaftConfigPb* other) {
  if (other != this) {
    node_.Swap(&other->node_);
    replica_.Swap(&other->replica_);
    std::swap(term_, other->term_);
    std::swap(index_, other->index_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
    _extensions_.Swap(&other->_extensions_);
  }
}

::google::protobuf::Metadata RaftConfigPb::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RaftConfigPb_descriptor_;
  metadata.reflection = RaftConfigPb_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int RaftLogEntryPb::kDataFieldNumber;
const int RaftLogEntryPb::kConfigFieldNumber;
const int RaftLogEntryPb::kIndexFieldNumber;
const int RaftLogEntryPb::kExtentFieldNumber;
const int RaftLogEntryPb::kTermFieldNumber;
const int RaftLogEntryPb::kPreviousLogTermFieldNumber;
const int RaftLogEntryPb::kPreviousLogIndexFieldNumber;
const int RaftLogEntryPb::kLeaderFieldNumber;
const int RaftLogEntryPb::kDataCommittedFieldNumber;
const int RaftLogEntryPb::kConfigCommittedFieldNumber;
const int RaftLogEntryPb::kVoteFieldNumber;
#endif  // !_MSC_VER

RaftLogEntryPb::RaftLogEntryPb()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void RaftLogEntryPb::InitAsDefaultInstance() {
  config_ = const_cast< ::raft::RaftConfigPb*>(&::raft::RaftConfigPb::default_instance());
}

RaftLogEntryPb::RaftLogEntryPb(const RaftLogEntryPb& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void RaftLogEntryPb::SharedCtor() {
  _cached_size_ = 0;
  data_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  config_ = NULL;
  index_ = GOOGLE_LONGLONG(0);
  extent_ = GOOGLE_LONGLONG(0);
  term_ = GOOGLE_LONGLONG(0);
  previous_log_term_ = GOOGLE_LONGLONG(0);
  previous_log_index_ = GOOGLE_LONGLONG(0);
  leader_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  data_committed_ = GOOGLE_LONGLONG(0);
  config_committed_ = GOOGLE_LONGLONG(0);
  vote_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RaftLogEntryPb::~RaftLogEntryPb() {
  SharedDtor();
}

void RaftLogEntryPb::SharedDtor() {
  if (data_ != &::google::protobuf::internal::kEmptyString) {
    delete data_;
  }
  if (leader_ != &::google::protobuf::internal::kEmptyString) {
    delete leader_;
  }
  if (vote_ != &::google::protobuf::internal::kEmptyString) {
    delete vote_;
  }
  if (this != default_instance_) {
    delete config_;
  }
}

void RaftLogEntryPb::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RaftLogEntryPb::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RaftLogEntryPb_descriptor_;
}

const RaftLogEntryPb& RaftLogEntryPb::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_raft_2eproto();
  return *default_instance_;
}

RaftLogEntryPb* RaftLogEntryPb::default_instance_ = NULL;

RaftLogEntryPb* RaftLogEntryPb::New() const {
  return new RaftLogEntryPb;
}

void RaftLogEntryPb::Clear() {
  _extensions_.Clear();
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_data()) {
      if (data_ != &::google::protobuf::internal::kEmptyString) {
        data_->clear();
      }
    }
    if (has_config()) {
      if (config_ != NULL) config_->::raft::RaftConfigPb::Clear();
    }
    index_ = GOOGLE_LONGLONG(0);
    extent_ = GOOGLE_LONGLONG(0);
    term_ = GOOGLE_LONGLONG(0);
    previous_log_term_ = GOOGLE_LONGLONG(0);
    previous_log_index_ = GOOGLE_LONGLONG(0);
    if (has_leader()) {
      if (leader_ != &::google::protobuf::internal::kEmptyString) {
        leader_->clear();
      }
    }
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    data_committed_ = GOOGLE_LONGLONG(0);
    config_committed_ = GOOGLE_LONGLONG(0);
    if (has_vote()) {
      if (vote_ != &::google::protobuf::internal::kEmptyString) {
        vote_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RaftLogEntryPb::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bytes data = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_data()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_config;
        break;
      }

      // optional .raft.RaftConfigPb config = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_config:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_config()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_index;
        break;
      }

      // optional int64 index = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_index:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &index_)));
          set_has_index();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_extent;
        break;
      }

      // optional int64 extent = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_extent:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &extent_)));
          set_has_extent();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_term;
        break;
      }

      // optional int64 term = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_term:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &term_)));
          set_has_term();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_previous_log_term;
        break;
      }

      // optional int64 previous_log_term = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_previous_log_term:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &previous_log_term_)));
          set_has_previous_log_term();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_previous_log_index;
        break;
      }

      // optional int64 previous_log_index = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_previous_log_index:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &previous_log_index_)));
          set_has_previous_log_index();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(66)) goto parse_leader;
        break;
      }

      // optional string leader = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_leader:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_leader()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->leader().data(), this->leader().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_data_committed;
        break;
      }

      // optional int64 data_committed = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_data_committed:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &data_committed_)));
          set_has_data_committed();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(80)) goto parse_config_committed;
        break;
      }

      // optional int64 config_committed = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_config_committed:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &config_committed_)));
          set_has_config_committed();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(90)) goto parse_vote;
        break;
      }

      // optional string vote = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_vote:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_vote()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->vote().data(), this->vote().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        if ((800u <= tag)) {
          DO_(_extensions_.ParseField(tag, input, default_instance_,
                                      mutable_unknown_fields()));
          continue;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void RaftLogEntryPb::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional bytes data = 1;
  if (has_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      1, this->data(), output);
  }

  // optional .raft.RaftConfigPb config = 2;
  if (has_config()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->config(), output);
  }

  // optional int64 index = 3;
  if (has_index()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(3, this->index(), output);
  }

  // optional int64 extent = 4;
  if (has_extent()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(4, this->extent(), output);
  }

  // optional int64 term = 5;
  if (has_term()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(5, this->term(), output);
  }

  // optional int64 previous_log_term = 6;
  if (has_previous_log_term()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(6, this->previous_log_term(), output);
  }

  // optional int64 previous_log_index = 7;
  if (has_previous_log_index()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(7, this->previous_log_index(), output);
  }

  // optional string leader = 8;
  if (has_leader()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->leader().data(), this->leader().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      8, this->leader(), output);
  }

  // optional int64 data_committed = 9;
  if (has_data_committed()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(9, this->data_committed(), output);
  }

  // optional int64 config_committed = 10;
  if (has_config_committed()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(10, this->config_committed(), output);
  }

  // optional string vote = 11;
  if (has_vote()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->vote().data(), this->vote().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      11, this->vote(), output);
  }

  // Extension range [100, 536870912)
  _extensions_.SerializeWithCachedSizes(
      100, 536870912, output);

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* RaftLogEntryPb::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional bytes data = 1;
  if (has_data()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->data(), target);
  }

  // optional .raft.RaftConfigPb config = 2;
  if (has_config()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->config(), target);
  }

  // optional int64 index = 3;
  if (has_index()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(3, this->index(), target);
  }

  // optional int64 extent = 4;
  if (has_extent()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(4, this->extent(), target);
  }

  // optional int64 term = 5;
  if (has_term()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(5, this->term(), target);
  }

  // optional int64 previous_log_term = 6;
  if (has_previous_log_term()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(6, this->previous_log_term(), target);
  }

  // optional int64 previous_log_index = 7;
  if (has_previous_log_index()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(7, this->previous_log_index(), target);
  }

  // optional string leader = 8;
  if (has_leader()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->leader().data(), this->leader().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        8, this->leader(), target);
  }

  // optional int64 data_committed = 9;
  if (has_data_committed()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(9, this->data_committed(), target);
  }

  // optional int64 config_committed = 10;
  if (has_config_committed()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(10, this->config_committed(), target);
  }

  // optional string vote = 11;
  if (has_vote()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->vote().data(), this->vote().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        11, this->vote(), target);
  }

  // Extension range [100, 536870912)
  target = _extensions_.SerializeWithCachedSizesToArray(
      100, 536870912, target);

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int RaftLogEntryPb::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional bytes data = 1;
    if (has_data()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->data());
    }

    // optional .raft.RaftConfigPb config = 2;
    if (has_config()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->config());
    }

    // optional int64 index = 3;
    if (has_index()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->index());
    }

    // optional int64 extent = 4;
    if (has_extent()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->extent());
    }

    // optional int64 term = 5;
    if (has_term()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->term());
    }

    // optional int64 previous_log_term = 6;
    if (has_previous_log_term()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->previous_log_term());
    }

    // optional int64 previous_log_index = 7;
    if (has_previous_log_index()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->previous_log_index());
    }

    // optional string leader = 8;
    if (has_leader()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->leader());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional int64 data_committed = 9;
    if (has_data_committed()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->data_committed());
    }

    // optional int64 config_committed = 10;
    if (has_config_committed()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->config_committed());
    }

    // optional string vote = 11;
    if (has_vote()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->vote());
    }

  }
  total_size += _extensions_.ByteSize();

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RaftLogEntryPb::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RaftLogEntryPb* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RaftLogEntryPb*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RaftLogEntryPb::MergeFrom(const RaftLogEntryPb& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_data()) {
      set_data(from.data());
    }
    if (from.has_config()) {
      mutable_config()->::raft::RaftConfigPb::MergeFrom(from.config());
    }
    if (from.has_index()) {
      set_index(from.index());
    }
    if (from.has_extent()) {
      set_extent(from.extent());
    }
    if (from.has_term()) {
      set_term(from.term());
    }
    if (from.has_previous_log_term()) {
      set_previous_log_term(from.previous_log_term());
    }
    if (from.has_previous_log_index()) {
      set_previous_log_index(from.previous_log_index());
    }
    if (from.has_leader()) {
      set_leader(from.leader());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_data_committed()) {
      set_data_committed(from.data_committed());
    }
    if (from.has_config_committed()) {
      set_config_committed(from.config_committed());
    }
    if (from.has_vote()) {
      set_vote(from.vote());
    }
  }
  _extensions_.MergeFrom(from._extensions_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RaftLogEntryPb::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RaftLogEntryPb::CopyFrom(const RaftLogEntryPb& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RaftLogEntryPb::IsInitialized() const {

  if (has_config()) {
    if (!this->config().IsInitialized()) return false;
  }

  if (!_extensions_.IsInitialized()) return false;  return true;
}

void RaftLogEntryPb::Swap(RaftLogEntryPb* other) {
  if (other != this) {
    std::swap(data_, other->data_);
    std::swap(config_, other->config_);
    std::swap(index_, other->index_);
    std::swap(extent_, other->extent_);
    std::swap(term_, other->term_);
    std::swap(previous_log_term_, other->previous_log_term_);
    std::swap(previous_log_index_, other->previous_log_index_);
    std::swap(leader_, other->leader_);
    std::swap(data_committed_, other->data_committed_);
    std::swap(config_committed_, other->config_committed_);
    std::swap(vote_, other->vote_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
    _extensions_.Swap(&other->_extensions_);
  }
}

::google::protobuf::Metadata RaftLogEntryPb::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RaftLogEntryPb_descriptor_;
  metadata.reflection = RaftLogEntryPb_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int RaftMessagePb::kTermFieldNumber;
const int RaftMessagePb::kFromFieldNumber;
const int RaftMessagePb::kLeaderFieldNumber;
const int RaftMessagePb::kDataCommittedFieldNumber;
const int RaftMessagePb::kConfigCommittedFieldNumber;
const int RaftMessagePb::kEntryFieldNumber;
const int RaftMessagePb::kNackFieldNumber;
const int RaftMessagePb::kLastLogTermFieldNumber;
const int RaftMessagePb::kLastLogIndexFieldNumber;
const int RaftMessagePb::kVoteFieldNumber;
#endif  // !_MSC_VER

RaftMessagePb::RaftMessagePb()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void RaftMessagePb::InitAsDefaultInstance() {
  entry_ = const_cast< ::raft::RaftLogEntryPb*>(&::raft::RaftLogEntryPb::default_instance());
}

RaftMessagePb::RaftMessagePb(const RaftMessagePb& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void RaftMessagePb::SharedCtor() {
  _cached_size_ = 0;
  term_ = GOOGLE_LONGLONG(0);
  from_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  leader_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  data_committed_ = GOOGLE_LONGLONG(0);
  config_committed_ = GOOGLE_LONGLONG(0);
  entry_ = NULL;
  nack_ = false;
  last_log_term_ = GOOGLE_LONGLONG(0);
  last_log_index_ = GOOGLE_LONGLONG(0);
  vote_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RaftMessagePb::~RaftMessagePb() {
  SharedDtor();
}

void RaftMessagePb::SharedDtor() {
  if (from_ != &::google::protobuf::internal::kEmptyString) {
    delete from_;
  }
  if (leader_ != &::google::protobuf::internal::kEmptyString) {
    delete leader_;
  }
  if (vote_ != &::google::protobuf::internal::kEmptyString) {
    delete vote_;
  }
  if (this != default_instance_) {
    delete entry_;
  }
}

void RaftMessagePb::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RaftMessagePb::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RaftMessagePb_descriptor_;
}

const RaftMessagePb& RaftMessagePb::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_raft_2eproto();
  return *default_instance_;
}

RaftMessagePb* RaftMessagePb::default_instance_ = NULL;

RaftMessagePb* RaftMessagePb::New() const {
  return new RaftMessagePb;
}

void RaftMessagePb::Clear() {
  _extensions_.Clear();
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    term_ = GOOGLE_LONGLONG(0);
    if (has_from()) {
      if (from_ != &::google::protobuf::internal::kEmptyString) {
        from_->clear();
      }
    }
    if (has_leader()) {
      if (leader_ != &::google::protobuf::internal::kEmptyString) {
        leader_->clear();
      }
    }
    data_committed_ = GOOGLE_LONGLONG(0);
    config_committed_ = GOOGLE_LONGLONG(0);
    if (has_entry()) {
      if (entry_ != NULL) entry_->::raft::RaftLogEntryPb::Clear();
    }
    nack_ = false;
    last_log_term_ = GOOGLE_LONGLONG(0);
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    last_log_index_ = GOOGLE_LONGLONG(0);
    if (has_vote()) {
      if (vote_ != &::google::protobuf::internal::kEmptyString) {
        vote_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RaftMessagePb::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int64 term = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &term_)));
          set_has_term();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_from;
        break;
      }

      // optional string from = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_from:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_from()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->from().data(), this->from().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_leader;
        break;
      }

      // optional string leader = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_leader:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_leader()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->leader().data(), this->leader().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_data_committed;
        break;
      }

      // optional int64 data_committed = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_data_committed:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &data_committed_)));
          set_has_data_committed();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_config_committed;
        break;
      }

      // optional int64 config_committed = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_config_committed:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &config_committed_)));
          set_has_config_committed();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(66)) goto parse_entry;
        break;
      }

      // optional .raft.RaftLogEntryPb entry = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_entry:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_entry()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_nack;
        break;
      }

      // optional bool nack = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_nack:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &nack_)));
          set_has_nack();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(80)) goto parse_last_log_term;
        break;
      }

      // optional int64 last_log_term = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_last_log_term:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &last_log_term_)));
          set_has_last_log_term();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(88)) goto parse_last_log_index;
        break;
      }

      // optional int64 last_log_index = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_last_log_index:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &last_log_index_)));
          set_has_last_log_index();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(98)) goto parse_vote;
        break;
      }

      // optional string vote = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_vote:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_vote()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->vote().data(), this->vote().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        if ((800u <= tag)) {
          DO_(_extensions_.ParseField(tag, input, default_instance_,
                                      mutable_unknown_fields()));
          continue;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void RaftMessagePb::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int64 term = 1;
  if (has_term()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->term(), output);
  }

  // optional string from = 2;
  if (has_from()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->from().data(), this->from().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->from(), output);
  }

  // optional string leader = 3;
  if (has_leader()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->leader().data(), this->leader().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->leader(), output);
  }

  // optional int64 data_committed = 4;
  if (has_data_committed()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(4, this->data_committed(), output);
  }

  // optional int64 config_committed = 5;
  if (has_config_committed()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(5, this->config_committed(), output);
  }

  // optional .raft.RaftLogEntryPb entry = 8;
  if (has_entry()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      8, this->entry(), output);
  }

  // optional bool nack = 9;
  if (has_nack()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(9, this->nack(), output);
  }

  // optional int64 last_log_term = 10;
  if (has_last_log_term()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(10, this->last_log_term(), output);
  }

  // optional int64 last_log_index = 11;
  if (has_last_log_index()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(11, this->last_log_index(), output);
  }

  // optional string vote = 12;
  if (has_vote()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->vote().data(), this->vote().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      12, this->vote(), output);
  }

  // Extension range [100, 536870912)
  _extensions_.SerializeWithCachedSizes(
      100, 536870912, output);

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* RaftMessagePb::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int64 term = 1;
  if (has_term()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->term(), target);
  }

  // optional string from = 2;
  if (has_from()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->from().data(), this->from().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->from(), target);
  }

  // optional string leader = 3;
  if (has_leader()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->leader().data(), this->leader().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->leader(), target);
  }

  // optional int64 data_committed = 4;
  if (has_data_committed()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(4, this->data_committed(), target);
  }

  // optional int64 config_committed = 5;
  if (has_config_committed()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(5, this->config_committed(), target);
  }

  // optional .raft.RaftLogEntryPb entry = 8;
  if (has_entry()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        8, this->entry(), target);
  }

  // optional bool nack = 9;
  if (has_nack()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(9, this->nack(), target);
  }

  // optional int64 last_log_term = 10;
  if (has_last_log_term()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(10, this->last_log_term(), target);
  }

  // optional int64 last_log_index = 11;
  if (has_last_log_index()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(11, this->last_log_index(), target);
  }

  // optional string vote = 12;
  if (has_vote()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->vote().data(), this->vote().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        12, this->vote(), target);
  }

  // Extension range [100, 536870912)
  target = _extensions_.SerializeWithCachedSizesToArray(
      100, 536870912, target);

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int RaftMessagePb::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int64 term = 1;
    if (has_term()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->term());
    }

    // optional string from = 2;
    if (has_from()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->from());
    }

    // optional string leader = 3;
    if (has_leader()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->leader());
    }

    // optional int64 data_committed = 4;
    if (has_data_committed()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->data_committed());
    }

    // optional int64 config_committed = 5;
    if (has_config_committed()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->config_committed());
    }

    // optional .raft.RaftLogEntryPb entry = 8;
    if (has_entry()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->entry());
    }

    // optional bool nack = 9;
    if (has_nack()) {
      total_size += 1 + 1;
    }

    // optional int64 last_log_term = 10;
    if (has_last_log_term()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->last_log_term());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional int64 last_log_index = 11;
    if (has_last_log_index()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->last_log_index());
    }

    // optional string vote = 12;
    if (has_vote()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->vote());
    }

  }
  total_size += _extensions_.ByteSize();

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RaftMessagePb::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RaftMessagePb* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RaftMessagePb*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RaftMessagePb::MergeFrom(const RaftMessagePb& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_term()) {
      set_term(from.term());
    }
    if (from.has_from()) {
      set_from(from.from());
    }
    if (from.has_leader()) {
      set_leader(from.leader());
    }
    if (from.has_data_committed()) {
      set_data_committed(from.data_committed());
    }
    if (from.has_config_committed()) {
      set_config_committed(from.config_committed());
    }
    if (from.has_entry()) {
      mutable_entry()->::raft::RaftLogEntryPb::MergeFrom(from.entry());
    }
    if (from.has_nack()) {
      set_nack(from.nack());
    }
    if (from.has_last_log_term()) {
      set_last_log_term(from.last_log_term());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_last_log_index()) {
      set_last_log_index(from.last_log_index());
    }
    if (from.has_vote()) {
      set_vote(from.vote());
    }
  }
  _extensions_.MergeFrom(from._extensions_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RaftMessagePb::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RaftMessagePb::CopyFrom(const RaftMessagePb& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RaftMessagePb::IsInitialized() const {

  if (has_entry()) {
    if (!this->entry().IsInitialized()) return false;
  }

  if (!_extensions_.IsInitialized()) return false;  return true;
}

void RaftMessagePb::Swap(RaftMessagePb* other) {
  if (other != this) {
    std::swap(term_, other->term_);
    std::swap(from_, other->from_);
    std::swap(leader_, other->leader_);
    std::swap(data_committed_, other->data_committed_);
    std::swap(config_committed_, other->config_committed_);
    std::swap(entry_, other->entry_);
    std::swap(nack_, other->nack_);
    std::swap(last_log_term_, other->last_log_term_);
    std::swap(last_log_index_, other->last_log_index_);
    std::swap(vote_, other->vote_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
    _extensions_.Swap(&other->_extensions_);
  }
}

::google::protobuf::Metadata RaftMessagePb::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RaftMessagePb_descriptor_;
  metadata.reflection = RaftMessagePb_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace raft

// @@protoc_insertion_point(global_scope)
